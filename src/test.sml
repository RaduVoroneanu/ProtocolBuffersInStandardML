use "gen.sml";

val t = Timer.startCPUTimer();
val m1 = MainMessage_NestedMessage.new;
val m1 = MainMessage_NestedMessage.set_field1 1 m1;
val m1 = MainMessage_NestedMessage.set_field2 2 m1;
val m1 = MainMessage_NestedMessage.set_field3 3 m1;
val m1 = MainMessage_NestedMessage.set_field4 4 m1;
val m1 = MainMessage_NestedMessage.set_field5 5 m1;
val m1 = MainMessage_NestedMessage.set_field6 6 m1;
val m1 = MainMessage_NestedMessage.set_field7 true m1;
val m1 = MainMessage_NestedMessage.set_field8 MainMessage_NestedEnum.kCASE0 m1;
val m1 = MainMessage_NestedMessage.set_field9 9 m1;
val m1 = MainMessage_NestedMessage.set_field10 10 m1;
val m1 = MainMessage_NestedMessage.set_field11 11 m1;
val m1 = MainMessage_NestedMessage.set_field12 12 m1;
val m1 = MainMessage_NestedMessage.set_field13 "13" m1;
val m2 = MainMessage_NestedMessage2.new;
val m2 = MainMessage_NestedMessage2.add_field1 1 m2;
val m2 = MainMessage_NestedMessage2.add_field2 2 m2;
val m2 = MainMessage_NestedMessage2.add_field3 3 m2;
val m2 = MainMessage_NestedMessage2.add_field4 4 m2;
val m2 = MainMessage_NestedMessage2.add_field5 5 m2;
val m2 = MainMessage_NestedMessage2.add_field6 6 m2;
val m2 = MainMessage_NestedMessage2.add_field7 true m2;
val m2 = MainMessage_NestedMessage2.add_field8 MainMessage_NestedEnum.kCASE0 m2;
val m2 = MainMessage_NestedMessage2.add_field9 9 m2;
val m2 = MainMessage_NestedMessage2.add_field10 10 m2;
val m2 = MainMessage_NestedMessage2.add_field11 11 m2;
val m2 = MainMessage_NestedMessage2.add_field12 12 m2;
val m2 = MainMessage_NestedMessage2.add_field13 "13" m2;
val m2 = MainMessage_NestedMessage2.add_field1 1 m2;
val m2 = MainMessage_NestedMessage2.add_field2 2 m2;
val m2 = MainMessage_NestedMessage2.add_field3 3 m2;
val m2 = MainMessage_NestedMessage2.add_field4 4 m2;
val m2 = MainMessage_NestedMessage2.add_field5 5 m2;
val m2 = MainMessage_NestedMessage2.add_field6 6 m2;
val m2 = MainMessage_NestedMessage2.add_field7 true m2;
val m2 = MainMessage_NestedMessage2.add_field8 MainMessage_NestedEnum.kCASE0 m2;
val m2 = MainMessage_NestedMessage2.add_field9 9 m2;
val m2 = MainMessage_NestedMessage2.add_field10 10 m2;
val m2 = MainMessage_NestedMessage2.add_field11 11 m2;
val m2 = MainMessage_NestedMessage2.add_field12 12 m2;
val m2 = MainMessage_NestedMessage2.add_field13 "13" m2;
val m3 = MainMessage.new;
val m3 = MainMessage.set_field1 1 m3;
val m3 = MainMessage.set_field2 MainMessage_NestedEnum.kCASE2 m3;
val m3 = MainMessage.set_field3 m1 m3;
val m3 = MainMessage.set_field4 m1 m3;
val m3 = MainMessage.add_field5 m2 m3;
val m3 = MainMessage.add_field5 m2 m3;
Transpiler.writeFile ("t1-acc.txt", "gc { sys = " ^ (Time.toString o #sys o #gc) (r) ^ " , usr = " ^ (Time.toString o #usr o #gc) (r) ^ "}\n" ^ "nongc { sys = " ^ (Time.toString o #sys o #nongc) (r) ^ " , usr = " ^ (Time.toString o #usr o #nongc) (r) ^ "}\n");
val t = Timer.startCPUTimer();
val s1 = MainMessage.serialize m3;
Transpiler.writeFile ("t1-ser.txt", "gc { sys = " ^ (Time.toString o #sys o #gc) (r) ^ " , usr = " ^ (Time.toString o #usr o #gc) (r) ^ "}\n" ^ "nongc { sys = " ^ (Time.toString o #sys o #nongc) (r) ^ " , usr = " ^ (Time.toString o #usr o #nongc) (r) ^ "}\n");
val t = Timer.startCPUTimer();
val d1 = MainMessage.deserialize s1;
Transpiler.writeFile ("t1-des.txt", "gc { sys = " ^ (Time.toString o #sys o #gc) (r) ^ " , usr = " ^ (Time.toString o #usr o #gc) (r) ^ "}\n" ^ "nongc { sys = " ^ (Time.toString o #sys o #nongc) (r) ^ " , usr = " ^ (Time.toString o #usr o #nongc) (r) ^ "}\n");



val t = Timer.startCPUTimer();
val m1 = MainMessage2_NestedMessage.new;
val m1 = MainMessage2_NestedMessage.set_field1 1 m1;
val m1 = MainMessage2_NestedMessage.set_field2 2 m1;
val m1 = MainMessage2_NestedMessage.set_field3 3 m1;
val m1 = MainMessage2_NestedMessage.set_field4 4 m1;
val m1 = MainMessage2_NestedMessage.set_field5 5 m1;
val m1 = MainMessage2_NestedMessage.set_field6 6 m1;
val m1 = MainMessage2_NestedMessage.set_field7 true m1;
val m1 = MainMessage2_NestedMessage.set_field8 MainMessage2_NestedEnum.kCASE0 m1;
val m1 = MainMessage2_NestedMessage.set_field9 9 m1;
val m1 = MainMessage2_NestedMessage.set_field10 10 m1;
val m1 = MainMessage2_NestedMessage.set_field11 11 m1;
val m1 = MainMessage2_NestedMessage.set_field12 12 m1;
val m1 = MainMessage2_NestedMessage.set_field13 "13" m1;
val m2 = MainMessage2_NestedMessage2.new;
val m2 = MainMessage2_NestedMessage2.add_field1 1 m2;
val m2 = MainMessage2_NestedMessage2.add_field2 2 m2;
val m2 = MainMessage2_NestedMessage2.add_field3 3 m2;
val m2 = MainMessage2_NestedMessage2.add_field4 4 m2;
val m2 = MainMessage2_NestedMessage2.add_field5 5 m2;
val m2 = MainMessage2_NestedMessage2.add_field6 6 m2;
val m2 = MainMessage2_NestedMessage2.add_field7 true m2;
val m2 = MainMessage2_NestedMessage2.add_field8 MainMessage2_NestedEnum.kCASE0 m2;
val m2 = MainMessage2_NestedMessage2.add_field9 9 m2;
val m2 = MainMessage2_NestedMessage2.add_field10 10 m2;
val m2 = MainMessage2_NestedMessage2.add_field11 11 m2;
val m2 = MainMessage2_NestedMessage2.add_field12 12 m2;
val m2 = MainMessage2_NestedMessage2.add_field13 "13" m2;
val m2 = MainMessage2_NestedMessage2.add_field1 1 m2;
val m2 = MainMessage2_NestedMessage2.add_field2 2 m2;
val m2 = MainMessage2_NestedMessage2.add_field3 3 m2;
val m2 = MainMessage2_NestedMessage2.add_field4 4 m2;
val m2 = MainMessage2_NestedMessage2.add_field5 5 m2;
val m2 = MainMessage2_NestedMessage2.add_field6 6 m2;
val m2 = MainMessage2_NestedMessage2.add_field7 true m2;
val m2 = MainMessage2_NestedMessage2.add_field8 MainMessage2_NestedEnum.kCASE0 m2;
val m2 = MainMessage2_NestedMessage2.add_field9 9 m2;
val m2 = MainMessage2_NestedMessage2.add_field10 10 m2;
val m2 = MainMessage2_NestedMessage2.add_field11 11 m2;
val m2 = MainMessage2_NestedMessage2.add_field12 12 m2;
val m2 = MainMessage2_NestedMessage2.add_field13 "13" m2;
val m3 = MainMessage2.new;
val m3 = MainMessage2.set_field1 1 m3;
val m3 = MainMessage2.set_field2 MainMessage2_NestedEnum.kCASE2 m3;
val m3 = MainMessage2.set_field3 m1 m3;
val m3 = MainMessage2.set_field4 m1 m3;
val m3 = MainMessage2.add_field5 m2 m3;
val m3 = MainMessage2.add_field5 m2 m3;
Transpiler.writeFile ("t2-acc.txt", "gc { sys = " ^ (Time.toString o #sys o #gc) (r) ^ " , usr = " ^ (Time.toString o #usr o #gc) (r) ^ "}\n" ^ "nongc { sys = " ^ (Time.toString o #sys o #nongc) (r) ^ " , usr = " ^ (Time.toString o #usr o #nongc) (r) ^ "}\n");
val t = Timer.startCPUTimer();
val s2 = MainMessage2.serialize m3;
Transpiler.writeFile ("t2-ser.txt", "gc { sys = " ^ (Time.toString o #sys o #gc) (r) ^ " , usr = " ^ (Time.toString o #usr o #gc) (r) ^ "}\n" ^ "nongc { sys = " ^ (Time.toString o #sys o #nongc) (r) ^ " , usr = " ^ (Time.toString o #usr o #nongc) (r) ^ "}\n");
val t = Timer.startCPUTimer();
val d2 = MainMessage2.deserialize s2;
Transpiler.writeFile ("t2-des.txt", "gc { sys = " ^ (Time.toString o #sys o #gc) (r) ^ " , usr = " ^ (Time.toString o #usr o #gc) (r) ^ "}\n" ^ "nongc { sys = " ^ (Time.toString o #sys o #nongc) (r) ^ " , usr = " ^ (Time.toString o #usr o #nongc) (r) ^ "}\n");

print "\n\n\n\n\n\nHELO\n";
List.length s1;
List.length s2;
val t = List.tabulate (List.length s1, fn x => (List.nth (s1, x), List.nth(s2, x)));
val t = List.filter (op<>) t;
